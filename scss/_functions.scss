//
// Functions
//

// Colors
// ---------------------------------------------------------------------------

@function validate-variant($variant) {
    @return type-of($variant) == number and unitless($variant) and $variant > 0 and $variant < 1000;
}

@function get-gray($variant: null) {
    @if $variant == null {
        $variant: 500;
    } @else if not validate-variant($variant) {
        @error "Invalid gray variant: #{$variant}";
    }

    $weight: percentage($variant / 1000);
    @return mix($black, $white, $weight);
}

@function get-color($name, $variant: null) {
    @if $name == gray {
        @return get-gray($variant);
    } @else if map-has-key($theme-colors, $name) {
        $name: map-get($theme-colors, $name);
    }

    @if not map-has-key($colors, $name) {
        @error "Invalid color name: #{$name}";
    }

    $raw-color: map-get($colors, $name);
    $mid-color: change-color($raw-color, $lightness: 50%);

    @if $variant == null {
        @return $raw-color;
    } @else if not validate-variant($variant) {
        @error "Invalid color variant: #{$variant}";
    } @else if $variant < 500 {
        $weight: percentage($variant / 500);
        @return mix($mid-color, $white, $weight);
    } @else if $variant > 500 {
        $weight: percentage(($variant - 500) / 500);
        @return mix($black, $mid-color, $weight);
    }

    @return $mid-color;
}

// Breakpoints
// ---------------------------------------------------------------------------

@function get-next-breakpoint($breakpoint) {
    $breakpoint-names: map-keys($breakpoints);
    $index: index($breakpoint-names, $breakpoint);
    @return if($index != null and $index < length($names), nth($names, $index + 1), null);
}

@function get-min-width($breakpoint) {
    $min-width: map-get($breakpoints, $breakpoint);
    @return if($min-width != 0, $min-width, null);
}

@function get-max-width($breakpoint) {
    $next-breakpoint: get-next-breakpoint($breakpoint);
    @return if($next-breakpoint, get-min-width($next-breakpoint) - 0.02, null);
}

@function get-infix($breakpoint) {
    @return if(get-min-width($breakpoint) == null, "", "-#{$breakpoint}");
}

// Containers
// ---------------------------------------------------------------------------

@function get-containers() {
    $containers: ();

    @each $breakpoint, $min-width in $breakpoints {
        @if $min-width != 0 and comparable($min-width, $gutter) {
            $container: (#{$breakpoint}: ($min-width - $gutter));
            $containers: map-merge($containers, $container);
        }
    }

    @return $containers;
}

// Utilities - Helpers
// ---------------------------------------------------------------------------

@function get-utility-classname($name, $opts, $infix, $suffix) {
    $prefix: if(map-has-key($opts, class), map-get($opts, class), $name);
    $suffix: if($suffix == null, "", "-#{$suffix}");
    @return #{$prefix}#{$infix}#{$suffix};
}

@function get-utility-properties($name, $opts) {
    $props: if(map-has-key($opts, property), map-get($opts, property), $name);

    @if type-of($props) != list and type-of($props) != map {
        $props: append((), $props);
    }

    @return $props;
}

@function get-utility-values($name, $opts) {
    @if not map-has-key($opts, values) {
        @error "Utility '#{$name}' requires values.";
    }

    $values: map-get($opts, values);

    @if type-of($values) != list and type-of($values) != map {
        $values: append((), $values);
    }

    @if type-of(nth($values, 1)) != list {
        $values: zip($values, $values);
    }

    @return $values;
}

// Utilities - Values
// ---------------------------------------------------------------------------

@function get-orders() {
    $orders: ();

    @for $i from 0 through $columns {
        $orders: append($orders, $i);
    }

    @return zip($orders, $orders);
}

@function get-margins() {
    $margins: map-merge((#{a}: auto), $spacers);

    @each $key, $val in $spacers {
        @if $key != 0 and $val != 0 {
            $negative: (n#{$key}: -$val);
            $margins: map-merge($margins, $negative);
        }
    }

    @return $margins;
}
