//
// Mixins
//

// Breakpoints
// ---------------------------------------------------------------------------

@mixin media-up($breakpoint) {
    $min-width: get-min-width($breakpoint);

    @if $min-width {
        @media (min-width: $min-width) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-down($breakpoint) {
    $max-width: get-max-width($breakpoint);

    @if $max-width {
        @media (max-width: $max-width) {
            @content;
        }
    } @else {
        @content;
    }
}

@mixin media-between($lower-breakpoint, $upper-breakpoint) {
    $min-width: get-min-width($lower-breakpoint);
    $max-width: get-max-width($upper-breakpoint);

    @if $min-width != null and $max-width != null {
        @media (min-width: $min-width) and (max-width: $max-width) {
            @content;
        }
    } @else if $max-width == null {
        @include media-up($lower-breakpoint) {
            @content;
        }
    } @else if $min-width == null {
        @include media-down($upper-breakpoint) {
            @content;
        }
    }
}

@mixin media-only($breakpoint) {
    $min-width: get-min-width($breakpoint);
    $max-width: get-max-width($breakpoint);

    @if $min-width != null and $max-width != null {
        @media (min-width: $min-width) and (max-width: $max-width) {
            @content;
        }
    } @else if $max-width == null {
        @include media-up($breakpoint) {
            @content;
        }
    } @else if $min-width == null {
        @include media-down($breakpoint) {
            @content;
        }
    }
}

// Utilities
// ---------------------------------------------------------------------------

@mixin utility($name, $options, $infix) {
    $properties: get-utility-property($name, $options);
    $responsive: map-get($options, responsive);

    @if $responsive == true or $infix == "" {
        @each $suffix, $value in get-utility-values($name, $options) {
            $classname: get-utility-classname($name, $options, $infix, $suffix);

            .#{$classname} {
                @each $property in $properties {
                    #{$property}: $value;
                }
            }
        }
    }
}
